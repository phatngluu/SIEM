package SIEM.util;

import java.util.Date;

import com.espertech.esper.common.client.EPCompiled;
import com.espertech.esper.common.client.configuration.Configuration;
import com.espertech.esper.compiler.client.CompilerArguments;
import com.espertech.esper.compiler.client.EPCompileException;
import com.espertech.esper.compiler.client.EPCompiler;
import com.espertech.esper.compiler.client.EPCompilerProvider;
import com.espertech.esper.runtime.client.EPDeployException;
import com.espertech.esper.runtime.client.EPDeployment;
import com.espertech.esper.runtime.client.EPRuntime;
import com.espertech.esper.runtime.client.EPRuntimeProvider;
import com.espertech.esper.runtime.client.EPStatement;

import SIEM.event.SSHFailedLogMessage;

public class MyInitializer2 {
    private EPCompiled epCompiled;
    // Get config
    Configuration configuration = new Configuration();

    public EPRuntime init() {
        configuration.getCommon().addEventType(SSHFailedLogMessage.class);

        initCompiler();
        if (epCompiled != null) {
             return initRuntime();
        }
        return null;
    }
    private void initCompiler(){
        // Get compiler args
        CompilerArguments compilerArguments = new CompilerArguments(configuration);

        // Compile SSHFailedLogMessage
        EPCompiler compiler = EPCompilerProvider.getCompiler();
        try {
            // @name annotation and assigns a name my-statement to the statement.
            epCompiled = compiler.compile("@name('ssh-failed-log-message') select senderIpAddr, port, date from SSHFailedLogMessage", compilerArguments);
        }
        catch (EPCompileException ex) {
            // handle exception here
            throw new RuntimeException(ex);
        }

        // // Compile SSHAlert
        // try {
        //     // @name annotation and assigns a name my-statement to the statement.
        //     epCompiled = compiler.compile("@name('ssh-alert') select alertMessage from SSHAlert", compilerArguments);
        // }
        // catch (EPCompileException ex) {
        //     // handle exception here
        //     throw new RuntimeException(ex);
        // }

    }

    private EPRuntime initRuntime(){
        

        // Set up runtime
        EPRuntime runtime = EPRuntimeProvider.getDefaultRuntime(configuration);
        EPDeployment deployment;
        try {
            deployment = runtime.getDeploymentService().deploy(epCompiled);
            // deployment = runtime.getDeploymentService().deploy(epCompiled2);
        }
        catch (EPDeployException ex) {
            // handle exception here
            throw new RuntimeException(ex);
        }

        // // Set up statement SSHLogMessage
        // EPStatement statement = runtime.getDeploymentService().getStatement(deployment.getDeploymentId(), "ssh-log-message");
        // statement.addListener( (newData, oldData, stmt, rt) -> {
        //     String message = (String) newData[0].get("message");
        //     String epochTimestamp = (String) newData[0].get("epochTimestamp");
        //     System.out.println(String.format("Epoch: %s, Message: %s", epochTimestamp, message));

        //     runtime.getEventService().sendEventBean((new SSHFailedLogMessage("sender", 5678, new Date())) , "SSHLogMessage");
        //     // Select failed message and send to 
        // });

        // Set up statement SSHFailedLogMessage
        EPStatement statement = runtime.getDeploymentService().getStatement(deployment.getDeploymentId(), "ssh-failed-log-message");
        statement.addListener( (newData, oldData, stmt, rt) -> {
            String senderIpAddr = (String) newData[0].get("senderIpAddr");
            int port = (int) newData[0].get("port");
            Date date = (Date) newData[0].get("date");
            System.out.println(String.format("senderIpAddr: %s, Port: %s, Date: %s", senderIpAddr, port, date.toString()));

            // Select failed message and send to 
        });

        return runtime;
    }
}
